(defwindow main
           :monitor 0
           :geometry (geometry :x "0%"
                               :y "2px"
                               :width "100%"
                               :height "30px"
                               :anchor "top center")
	   :exclusive true
           :reserve (struts :distance "40px" :side "top")
           :windowtype "dock"
           :wm-ignore false
  (bar)

)

(defwidget bar []
  (centerbox
    time
    (workspaces :width 20)
    (sidestuff)
    ))

(defpoll used_mem :interval "1s"
`free | awk '/Mem/ {printf "%.1f", $3 / 1024 / 1024}'`)
(defpoll total_mem :interval "1s"
`free | awk '/Mem/ {printf "%.1f", $2 / 1024 / 1024}'`)

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    (metric :label "ðŸ”Š ${volume}"
            :value volume
            :onchange "pamixer --set-volume {}")
    (metric :label "ðŸšƒ ï‹›  ${used_mem}/${total_mem}"
            ;; :value {EWW_RAM.used_mem_perc}
            :value used_mem
            :onchange "")
    (circular-progress
            :class "circle"
            :value {EWW_RAM.used_mem_perc}
            :start-at 20
            :thickness 3
            :width 28
            )
    (metric :label "ðŸ’¾"
            :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
            :onchange "")
    (metric :label "ðŸ”† ${brightness}"
            :value brightness
            ;; :drawvalue
            ;; :onchange "ddcutil setvcp 10 {} --noverify --sleep-multiplier=0.1")
            :onchange "scripts/setbrightness {}")
    ;; (calendar)
    ))


(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 100
           :width 200
           :active {onchange != ""}
           :value value
           :onchange onchange
           ;; :draw-value true
           :timeout "5s")))


(defpoll time :interval "200ms"
  `date +%H:%M:%S`)

(defpoll volume :initial "50" :interval "1s"
  "scripts/getvol")

(defpoll brightness :initial "80" :interval "3s"
  "scripts/getbrightness")

(deflisten workspaces :initial "[]" "bash ~/.config/eww/scripts/get-workspaces")
(deflisten current_workspace :initial "1" "bash ~/.config/eww/scripts/get-active-workspace")
(defwidget workspaces []
  (eventbox :onscroll "bash ~/.config/eww/scripts/change-active-workspace {} ${current_workspace}" :class "workspaces-widget"
    (box :space-evenly false :width 40
      (label :text "${workspaces}${current_workspace}" :visible false)
      (for workspace in workspaces
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}" :visible "${workspace.windows > 0 ? "true" : "false"}"
          (box :class "workspace-entry ${workspace.windows > 0 ? "occupied" : "empty"} ${workspace.id == current_workspace ? "current" : ""}"
            (label :text "${workspace.id}" :width 30)
            )
          )
        )
      )
    )
  )
